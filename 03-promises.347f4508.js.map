{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAYtC,SAASI,EAAcC,EAAMC,EAAQC,GACnC,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,GAAG,EAC5BC,YAAW,KAuBf,IAAuBC,EAAUC,GAAVD,EAtBHF,EAsBaG,EAtBVN,EAAKG,EAuBnB,IAAII,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCR,YAAW,KACLM,GAAgBF,EAAQ,C,SAACH,E,MAAUC,IAEvCG,EAAO,C,SAACJ,E,MAAUC,GAAO,GACxBA,EAAM,KA5BJO,MAAK,EAACR,SAAEA,EAAQC,MAAEA,MACjBhB,EAAAwB,OAAOC,QAAQ,uBAAqBV,EAAY,QAASC,EAAOJ,MAAW,IAE5Ec,OAAM,EAACX,SAAEA,EAAQC,MAAEA,MAChBhB,EAAAwB,OAAOG,QAAQ,sBAAoBZ,EAAU,QAASC,EAAOJ,MAAW,GACxE,GAELF,E,CApBPR,EAAKC,KAAKyB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAIC,iBACJ,MAAMd,MAACA,EAAKN,KAAEA,EAAIC,OAAEA,GAqBL,CACbK,MAAOe,OAAO7B,EAAKI,WAAW0B,OAC9BtB,KAAMqB,OAAO7B,EAAKK,UAAUyB,OAC5BrB,OAAQoB,OAAO7B,EAAKM,YAAYwB,QAtBlClB,WAAWL,EAAeO,EAAON,EAAMC,EAAQK,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  fieldDelay: document.querySelector('input[name=\"delay\"]'),\n  fieldStep: document.querySelector('input[name=\"step\"]'),\n  fieldAmount: document.querySelector('input[name=\"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt){\n  evt.preventDefault()\n  const {delay, step, amount} = getFormValues()\n\n  setTimeout(startPromises, delay, step, amount, delay)\n}\n\nfunction startPromises(step, amount, start){\n  for(let i = 0; i < amount; i+=1){\n    setTimeout(()=>{\n      createPromise(i, step*i)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position + 1} in ${delay + start}ms`);\n          })\n        .catch(({ position, delay }) => {\n            Notify.failure(`❌ Rejected promise ${position + 1} in ${delay + start}ms`);\n          })\n        \n    }, step)\n  }\n}\n\nfunction getFormValues() {\n  const values = {\n    delay: Number(refs.fieldDelay.value),\n    step: Number(refs.fieldStep.value),\n    amount: Number(refs.fieldAmount.value),\n  }\n\n  return values;  \n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(()=> {\n      if (shouldResolve) {resolve({position, delay})} \n\n      reject({position, delay})\n    }, delay)\n  })\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","fieldDelay","fieldStep","fieldAmount","$47d4ff9957288465$var$startPromises","step","amount","start","i","setTimeout","position","delay","Promise","resolve","reject","shouldResolve","Math","random","then","Notify","success","catch","failure","addEventListener","evt","preventDefault","Number","value"],"version":3,"file":"03-promises.347f4508.js.map"}